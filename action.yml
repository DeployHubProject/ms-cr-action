name: "Helm Chart Releaser"
description: "Helm Chart Releaser that includes signing producing .asc file"
inputs:
  GPG_KEYRING_BASE64:
    description: "GPG Keyring in Base64"
    required: true
  GPG_PASSPHRASE:
    description: "GPG pass phrase"
    required: true
  GPG_KEY:
    description: "GPG Key Name"
    required: true
  GH_TOKEN:
    description: "GitHub Token that has access to create releases"
    required: true
  chart:
    description: "Directory for the Chart"
    required: true
  repo:
    description: "Repository for the chart updates"
    required: true
  sleep:
    description: "Sleep time for GH page caching"
    required: false
    default: "5m"
  notes:
    description: "Release Notes"
    required: false
    default: "Supply Chain Evidence Catalog"
runs:
  using: "composite"
  steps:
    - name: Install Helm
      uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3.5
      with:
        version: "3.11.1"

    - name: Run chart-releaser
      run: |
        GH_TOKEN="${{ inputs.GH_TOKEN }}"
        GPG_KEYRING_BASE64="${{ inputs.GPG_KEYRING_BASE64 }}"
        GPG_PASSPHRASE="${{ inputs.GPG_PASSPHRASE }}"
        GPG_KEYRING="/tmp/secring.gpg"
        GPG_PASSPHRASE_FILE="/tmp/passphrase"

        # Create keyring and passphrase file
        base64 -d <<< "${GPG_KEYRING_BASE64}" > "${GPG_KEYRING}"
        echo "${GPG_PASSPHRASE}" > "${GPG_PASSPHRASE_FILE}"

        # Pull all the branches
        git pull --all; for remote in `git branch -r | grep -v main | grep -v \>`; do git branch --track ${remote#origin/} $remote; done

        # Helm Package with signing
        TAG=$(basename $(helm package "${{ inputs.chart }}" -u --key "${{ inputs.GPG_KEY }}" --sign --keyring "${GPG_KEYRING}" --passphrase-file "${GPG_PASSPHRASE_FILE}" | cut -d: -f2) .tgz)

        # Clean up GPG and intermediate tgz files
        rm -rf "${GPG_KEYRING}" "${GPG_PASSPHRASE_FILE}" ${{ inputs.chart }}/charts/*.tgz

        # Rename the signing .prov to .asc for OpenSSF Scorecard
        ls *.prov | xargs -I {} sh -c 'mv $1 `basename $1 .prov`.asc' - {}

        # Remove existing tags and releases
        gh release delete "${TAG}" --cleanup-tag -y | test 1

        # Create new commit and release
        echo "Created ${TAG}"
        git add ${{ inputs.chart }}/Chart.yaml
        git commit -m "Updated chart"
        git tag -f "${TAG}"
        git push
        git push -f --tags
        gh release create "${TAG}" ${TAG}.* --title "${TAG}" --repo ${{ inputs.repo }} --notes "${{ inputs.notes }}"

        # Copy the release .tgz for indexing
        cp ${TAG}.tgz ${{ inputs.chart }}/charts

        # Get the existing index.yaml for merging
        git show gh-pages:index.yaml > /tmp/index.yaml

        # Index the new release into the index.yaml
        helm repo index  ${{ inputs.chart }}/charts --merge /tmp/index.yaml

        # Save the new index.yaml
        mv ${{ inputs.chart }}/charts/index.yaml /tmp

        # Cleanup any working files and switch to the gh-pages branch
        git reset --hard
        git checkout gh-pages

        # Put the new index.yaml in place and commit/push it
        mv /tmp/index.yaml index.yaml
        git add index.yaml
        git commit -m "Generate Main Charts ${TAG}"
        git push
      shell: bash
