name: "Helm Chart Releaser"
description: "Helm Chart Releaser that includes signing producing .asc file"
inputs:
  gpg_keyring_base64:
    description: "GPG Keyring in Base64"
    required: true
  gpg_passphrase:
    description: "GPG pass phrase"
    required: true
  gpg_key:
    description: "GPG Key Name"
    required: true
  gh_token:
    description: "GitHub Token that has access to create releases"
    required: true
  gh_handle:
    description: "GitHub Handle for the user"
    required: true
  chart:
    description: "Directory for the Chart"
    required: true
  chart_version:
    description: "Version of the Chart"
    required: false
    default: ""
  image_repository:
    description: "Image Repo"
    required: false
    default: ""
  image_tag:
    description: "Image tag"
    required: false
    default: ""
  image_digest:
    description: "Image Digest"
    required: false
    default: ""
  notes:
    description: "Release Notes"
    required: false
    default: "Supply Chain Evidence Catalog"
runs:
  using: "composite"
  steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Configure Git
      id: git
      run: |
        git config user.name "${{ inputs.gh_handle }}"
        git config user.email "${{ inputs.gh_handle }}@users.noreply.github.com"
      shell: bash

    - name: Get all branches
      id: branches
      run: |
        git pull --all; for remote in `git branch -r | grep -v main | grep -v \>`; do git branch --track ${remote#origin/} $remote; done
      shell: bash

    - name: Install Helm
      id: helm
      uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3.5
      with:
        version: "3.11.1"

    - name: Update Values and Chart
      if: "${{ inputs.chart_version != '' }}"
      id: chart
      uses: fjogeleit/yaml-update-action@ce08f5c158d28267b942d9ee71a62628f5d68644 # main
      with:
        commitChange: false
        changes: |
          {
            "${{ inputs.chart }}/values.yaml":
            {
              "image.repository": "${{ inputs.image_repository }}",
              "image.tag": "${{ inputs.image_tag }}",
              "image.sha": "${{ inputs.image_digest }}"
            },
            "${{ inputs.chart }}/Chart.yaml":
            {
              "version": "${{ inputs.chart_version }}",
              "appVersion": "${{ inputs.chart_version }}"
            }
          }

    - name: Use Node.js
      if: "${{ inputs.chart_version == '' }}"
      id: node
      uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
      with:
        node-version: "18.x"

    - name: Update Main Chart
      if: "${{ inputs.chart_version == '' }}"
      id: main_chart
      run: |
        sleep 5m
        yarn install
        git pull
        node main.js
        git add ${{ inputs.chart }}/Chart.yaml
        git commit -m "Generate Main Chart"
        git push
      shell: bash

    - name: Run chart-releaser
      id: cr
      run: |
        set -x
        gh_token="${{ inputs.gh_token }}"
        gpg_keyring_base64="${{ inputs.gpg_keyring_base64 }}"
        gpg_passphrase="${{ inputs.gpg_passphrase }}"
        gpg_keyring="/tmp/secring.gpg"
        gpg_passphrase_file="/tmp/passphrase"

        # Create keyring and passphrase file
        base64 -d <<< "${gpg_keyring_base64}" > "${gpg_keyring}"
        echo "${gpg_passphrase}" > "${gpg_passphrase_file}"

        # Loop until all of the dependencies are downloaded
        set +o pipefail +e
        helm dep update "${{ inputs.chart }}"
        while [ $? -ne 0 ]
        do
          sleep 1m
          helm dep update "${{ inputs.chart }}"
        done
        set -o pipefail -e

        # Helm Package with signing
        tag=$(basename $(helm package "${{ inputs.chart }}" -u --key "${{ inputs.gpg_key }}" --sign --keyring "${gpg_keyring}" --passphrase-file "${gpg_passphrase_file}" | cut -d: -f2) .tgz)
        echo "Created ${tag}"

        # Clean up GPG and intermediate tgz files
        rm -rf "${gpg_keyring}" "${gpg_passphrase_file}" "${{ inputs.chart }}/charts"

        # Rename the signing .prov to .asc for OpenSSF Scorecard
        ls *.prov | xargs -I {} sh -c 'cp $1 `basename $1 .prov`.asc' - {}

        # Remove existing tags and releases
        gh release delete "${tag}" --cleanup-tag -y || true

        # Create new commit and release
        git tag -f "${tag}"
        git push -f --tags
        release=$(gh release create "${tag}" ${tag}.* --title "${tag}" --notes "${{ inputs.notes }}" | sed 's#/tag/#/download/#')

        # Copy the release .tgz for indexing
        mkdir -p /tmp/charts
        mv ${tag}.tgz /tmp/charts
        mv ${tag}.tgz.asc /tmp/charts
        mv ${tag}.tgz.prov /tmp/charts

        # Get the existing index.yaml for merging
        git show gh-pages:index.yaml > /tmp/index.yaml

        # Index the new release into the index.yaml
        helm repo index /tmp/charts --merge /tmp/index.yaml --url "${release}"

        # Save the new index.yaml
        mv /tmp/charts/index.yaml /tmp

        # Cleanup any working files and switch to the gh-pages branch
        git reset --hard
        git clean -x -f -d
        git checkout gh-pages
        git pull

        # Put the new index.yaml in place and commit/push it
        mv /tmp/index.yaml index.yaml
        git add index.yaml
        git commit -m "Generate Charts ${tag}"
        git push -f
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh_token }}
